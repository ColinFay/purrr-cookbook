--- 
title: "purrr cookbook"
author: "Colin Fay"
date: "Last update on: `r Sys.Date()`"
knit: "bookdown::render_book"
site: bookdown::bookdown_site
output: bookdown::gitbook
documentclass: book
bibliography: [book.bib, packages.bib]
biblio-style: apalike
link-citations: true
links-as-notes: true
colorlinks: true
description: "A {purrr} cookbookdown."
---

```{r include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(
  .packages(), 'bookdown', 'knitr', 'rmarkdown', 'purrr'
), 'packages.bib')
```

# Welcome {-}

```{r echo=FALSE}
knitr::include_graphics("https://www.rstudio.com/wp-content/uploads/2014/04/purrr.png")
```


This cookbookdown covers a series of common receipes you can do with {purrr}. 

It's based on several blogposts written on [colinfay.me](http://colinfay.me/tags/purrr/), and some {purrr} code shared [on Twitter](https://twitter.com/i/moments/950031718521671680).

As any cookbook, this bookdwon is not intended at explaining in details what {purrr} does or how the functions used work. There is a short discussion after each receipes to quickly explain what the code does. But, for example, you won't find an explanation on the Shapiro Test in the chapter talking about this test.

<!--chapter:end:index.rmd-->

# How to read this book {-}

This book is divided in `r length(list.files(pattern = "Rmd")) - 2` chapters. Each chapter contains a random number of receipes, but I'll try to put some new ones from time to time. 

- "Statistics" contains a list of useful common stat tricks with {purrr}
- "Webmining" gives you elements to mine info from the web 
- "Text Wrangling" covers some text mining stuffs
- "Code optimisation" is a chapter about using {purrr} to write better code
- "Data Wrangling" is a list of receipes I couldn't fit anywhere else ¯\\_(ツ)_/¯

Based on other programming cookbook template, each receipe is divided as such: 

- "I want to...": what you want to do 
- "Here's how to": how to do this 
- "Ok, but why?": more explanations about the solution
- "See also": further references

## Who is this cookbook for?  {-}

Anybody interested in learning more about {purrr}. 

## Before reading  {-}

We expect the reader to be somewhat familiar with R. 

Copy and paste the below code to be sure you have all the packages you need.

```{r eval = FALSE}
install.packages("tidyverse")
install.packages("broom")
install.packages("rvest")
install.packages("attempt")
install.packages("tidystringdist")
install.packages("tidytext")
```

We'll be using {dplyr} from time to time, so let's load it now: 

```{r message = FALSE}
library(dplyr)
```


## You want another receipe {-}

For another receipe, please ask on this issue. 

## You want to share receipe {-}

If you want to share a receipe, feel free to make a PR on the GitHub repo.

## What to do if you find a typo  {-}

Please, yes please, open a PR (or feel free to reach me on [Twitter](https://twitter.com/_ColinFay))

```{r include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(
  .packages(), 'bookdown', 'knitr', 'rmarkdown', 'purrr'
), 'packages.bib')
```

<!--chapter:end:intro.Rmd-->

# purrr basics {#intro}

```{r echo = FALSE}
library(purrr)
```


## map function 

### I want to... 

Start using {purrr}. 

### Here's how to:  

The base skeleton of {purrr} iteration functions are: 

```{r eval = FALSE}
library(purrr)
map(.x, .f, ...)
```

### Ok, but why? 

In this skeleton:

+ `.x` is a list, a data.frame or a vector.
+ `.f` is the function, formula or atomic vector that will be applied on each element of `.f`.

### See also 

---

## map_* functions

### I want to... 

Control the output of my iterations. 

### Here's how to:

```{r}
# Returns a dbl
map_dbl(1:10, sqrt)
```

### Ok, but why?

You can control the output of your map with these functions: `map_lgl` `map_chr` `map_int` `map_dbl` `map_dfr` `map_dfc`. 

### See also 

---

## Mappers

### I want to... 

Create a function on the fly.

### Here's how to:

```{r}
map_dbl(1:10, ~ .x + 2)
```

### Ok, but why?

One sided formulaes, also called mappers, can be created as the `.f` argument of map. It is build with `~`, then `.x` refers to the element of the list in `.x`. 

When mapping on two elements, you can use `.x` and `.y`. With more than two elements, refer to them with `..1`, `..2`, `..3`, etc. 

---

## map on 2 elements

### I want to... 

map over two lists.

### Here's how to:

```{r}
map2_chr(letters, LETTERS, paste)
```

### Ok, but why?

`map2` and friends (`map2` `map2_lgl` `map2_int` `map2_dbl` `map2_chr` `map2_dfr` `map2_dfc`) allows to map over two elements. 

### See also 

---

## map on more elements

### I want to... 

map over more than two lists. 

### Here's how to:

```{r}
l <- list(a = 1:3, b = 2:4, c = 3:5)
pmap_dbl(l, ~ ..1 + ..2 + ..3)
```

### Ok, but why?

`pmap` and friends (`pmap_lgl` `pmap_int` `pmap_dbl` `pmap_chr` `pmap_dfr` `pmap_dfc`) allows to map over more than two elements. 

### See also 

---

## Iteration for side effect

### I want to... 

Iterate only for side effect.

### Here's how to:

```{r}
walk(1:2, plot)
```

### Ok, but why?

`walk` is the silent conterpart of map, but invisible: you call it just for side effects. `map_*`, `map2_*`, `pwalk` and friends also exists. 

### See also



<!--chapter:end:basics.Rmd-->

# Statistics {#stats}

```{r}
set.seed(2811)
```

## Compute the mean 

### I want to... 

Get the mean of vectors of unequal length. 

### Here's how to:

```{r}
numbers <- list(rnorm(10), rnorm(10), rnorm(1000))
trim <- 20
na_rm <- TRUE
pmap_dbl(list(numbers, trim, na_rm), ~ mean(..1, ..2,..3))
```

### Ok, but why?

`pmap` takes a list of list as an input, and send them to the function. In `.f`, you can refer to the list arguments with their position: here, `..1`, `..2` and `..3`.

### See also 

---

## Running a shapiro test

Given the dataset `airquality`.

### I want to... 

Look for normality on all columns, and know the one which are normal: 

### Here's how to:   

```{r}
map(airquality, shapiro.test) %>% keep(~ .x$p.value > 0.05)
```

### Ok, but why? 

In R, data.frame are __lists of vectors of same length__. So, you can apply a function the same way you would apply a function on any list. Here, we are mapping a `shapiro.test`, on all columns, and we `keep` only the elements with a `.x$p.value` which is more than 0.05.

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 6 : doing statistics](http://colinfay.me/purrr-statistics/)

---

## Test only numeric columns

### I want to... 

Make sure I make my statistical test on numeric values. 

### Here's how to:   

```{r}
map_if(.x = iris, .p = is.numeric, .f = shapiro.test)
```

### Ok, but why? 

`map_if` runs `.f` only if the `.x` verifies the condition `.p`.

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 6 : doing statistics](http://colinfay.me/purrr-statistics/)

---

## cor.test

### I want to... 

Make a bulk cor.test of all my variables.

### Here's how to:   

```{r}
library(tidystringdist) # Works since v0.1.2 
comb <- tidy_comb_all(names(airquality))
pmap(comb, ~ cor.test(airquality[[.x]], airquality[[.y]])) %>% 
  map_df(broom::tidy) %>% 
  cbind(comb, .) %>%
  select(V1:parameter)
```

### Ok, but why? 

`comb` is a table containing all combinations of the names of the columns. What we do is mapping a `cor.test` on all these combinations by extracting, each time, the column as a vector, with `airquality[[.x]]` and `airquality[[.y]]`. 

`pmap` allows to use a list as a signe input.

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 6 : doing statistics](http://colinfay.me/purrr-statistics/)

---

## Linear regression

### I want to... 

Get the r.squared of each of the possible lm of airquality combinations.

### Here's how to:   

```{r}
res <- pmap(comb, ~ lm(airquality[[.x]] ~ airquality[[.y]]))
get_rsquared <- compose(as_mapper(~ .x$r.squared), summary)
map_dbl(res, get_rsquared)
```

### Ok, but why? 

We're building a model of all combinations with `pmap`, just as before with `cor.test`.

Then, the `get_rsquared` function is a composition of extracting the r.squared of the summary of a lm result. `compose(x, y)` allows to build `x(y())`. Here, we are combining a mapper extracting the `r.squared` element out of the `summary()` of a `lm`.

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 6 : doing statistics](http://colinfay.me/purrr-statistics/)

---

## significant r.squared

### I want to... 

Know if some r.square are above O.5 :

### Here's how to:   

```{r}
res <- pmap(comb, ~ lm(airquality[[.x]] ~ airquality[[.y]]))
get_rsquared <- compose(as_mapper(~ .x$r.squared), summary)
map_dbl(res, get_rsquared) %>% some(~ .x > 0.5)
```

### Ok, but why? 

`some` checks if any of the input validate the condition.

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 6 : doing statistics](http://colinfay.me/purrr-statistics/)

---

## test and validation

### I want to... 

Create 20 test and validation datasets.

### Here's how to:   

```{r message=FALSE}
# From http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.csv
titanic <- readr::read_csv("titanic.csv")
train <- rerun(20, sample_frac(titanic, size = 0.8))
validation <- map(train, ~ anti_join(titanic, .x))
```

### Ok, but why? 

`rerun` runs the sampling  20 times. To obtain the 20 validation sets, we anti-join each elements of the train list with the original dataframe. That way, `train[1]` + `validation[1]` = `titanic`, `train[2]` + `validation[2]` = `titanic`, etc

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 6 : doing statistics](http://colinfay.me/purrr-statistics/)

---

## rpart

### I want to... 

Create 20 `rpart`, modeled on my 20 elements in the `test` list.

### Here's how to:   

```{r}
library(rpart)
rpart_pimped <- partial(rpart, formula = survived ~ sex, method = "class")
res <- map(train, rpart_pimped)
res[[1]]
```

### Ok, but why? 

`partial` allows to build a prefil function, which is then mapped on each element.

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 6 : doing statistics](http://colinfay.me/purrr-statistics/)

---

## Make prediction

### I want to... 

Make prediction based on my models

### Here's how to:   

```{r}
prediction <- map2(validation, res, ~ predict(.y, .x, type = "class"))
w_prediction <- map2(validation, prediction, ~ mutate(.x, prediction = .y))
```

### Ok, but why? 

`map2` allows to map on two arguments.

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 6 : doing statistics](http://colinfay.me/purrr-statistics/)

---

## Confusion matrix

### I want to... 

Create a conf matrix on all these results:

### Here's how to:   

```{r}
library(caret)
conf_mats <- map(w_prediction, ~ confusionMatrix(.x$prediction, .x$survived))
```

### Ok, but why? 

You can use `.x` as many times as you want in `.f`.

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 6 : doing statistics](http://colinfay.me/purrr-statistics/)

---

## Sensitivity and Specificity

### I want to... 

Detect which models have a specificity above 0.7 and sensitivity above 0.85 (randomly chosen numbers).

### Here's how to:   

```{r}
keep_index <- function(.x, .p, ...) {
  sel <- purrr:::probe(.x, .p, ...)
  which(sel)
}
sens <- map_dbl(conf_mats, ~ .x$byClass["Sensitivity"]) %>% keep_index(~ .x > 0.85)
spec <- map_dbl(conf_mats, ~ .x$byClass["Specificity"]) %>% keep_index(~ .x > 0.7)
keep(sens, map_lgl(sens, ~ .x %in% spec))
```

### Ok, but why? 

We have created a function that returns the position of elements that validates a condition. `sens` is the vector containing the position with sensitivity above 0.85, `spec` the vector for specificity above 0.7.

Then, we pass to `keep` a vector of logical built with `map_lgl`. This vector tells if each elements of `sens` is or isn't in `spec`.

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 6 : doing statistics](http://colinfay.me/purrr-statistics/)

<!--chapter:end:statistics.Rmd-->

# Webmining {#webmining}

## Status code 

### I want to...

Create a status code checker.

### Here's how to 

```{r}
library(httr)
get_status <- compose(status_code, GET)
get_status("colinfay.me")
```

### Ok, but why?

`compose(y, x)` composes a function that will do `y(x())`. So here, `get_status("url")` will do `status_code(GET("url"))`.

### See also

---

## Check status code

### I want to...

Check for http status code for a list of pages. 

### Here's how to 

```{r}
urls <- c("http://colinfay.me", "http://thinkr.fr", "reallynotanadress")
get_status <- compose(status_code, GET)
map(urls, get_status) %>% every(~ .x == 200)
```

### Ok, but why?

200 is a status code that indicates that the connexion went smoothly. The `every` function here checks if all the status code we just `GET` are equal to 200. 

### See also 

--- 
## Clean a list of urls

### I want to...

Keep only the 200 codes from my list of `urls`. 

### Here's how to 

```{r}
urls <- c("http://colinfay.me", "http://thinkr.fr", "reallynotanadress")
get_status <- compose(status_code, GET)
map(urls, get_status) %>% set_names(nm = urls) %>% keep(~ .x == 200)
```

### Ok, but why?

`set_names` sets the name for all the elements from the list. You can either leave the function with just the list as first arg, or pass it another list of the same length as `x`. 

`keep` only keeps the elements that validate the condition. 

### See also 

--- 
## Scrape a list of urls which may fail

### I want to...

Launch a `read_html` function on a list of webpages, and some may throw an error. 

The difference with the function we saw previously ? 

```{r error = TRUE}
# http status code error 
GET("notexistingurl")
# Error because host doesn't exist
GET("notexistingurl.org")
```


### Here's how to 

```{r}
library(rvest)
urls <- c("http://colinfay.me", "http://thinkr.fr", "reallynotanadress")
possible_read <- possibly(read_html, otherwise = NULL)
map(urls, possible_read) %>% set_names(urls) %>% compact() 
```

### Ok, but why

`possibly` turns a function into another function that returns what is defined in otherwise in case of failure. Here, we chose to return NULL. 

`compact()` removes all the elements from a list which are NULL. 

--- 
## Getting h2

### I want to...

Get the h2s from a list of urls. 

### Here's how to 

```{r}
get_h2 <- compose(html_text,
                  as_mapper(~ html_nodes(.x, "h2")), 
                  read_html)
urls <- c("http://colinfay.me", "http://thinkr.fr")
map(urls, get_h2) %>% set_names(urls)
```

---

## JSON / XML

Given the following JSON files: 

```
{
    "obs1": {
        "id": "AA",
        "Age": "29",
        "Res": {
            "test1": "17", 
            "test2": "12"
        }
    },
    "obs2": {
        "id": "BB",
        "Age": "35",
        "Res": {
            "test1": "12", 
            "test2": "5"
        }
    }
}
```
```{r}
json_file <- jsonlite::read_json("test.json")
```

### I want to... 

Extract all the elements in "value".

### Here's how to: 

```{r}
map(json_file, "id")
```

### Ok, but why? 

If you put a character vector as `.f`, `map` looks for all the elements with the name matching this vector. This call works for the first level of the list

### See also

### I want to... 

Extract all the test1 results.

### Here's how to: 

```{r}
map(json_file, ~ pluck(.x, "Res", "test1"))
```

### Ok, but why 

What we called before is a shortcut for `map(file, ~ pluck(.x, "id")`. That shortcut works on the first level of the list. If you need to go deeper, you need to explicitely specify the `pluck` call.

### See also

<!--chapter:end:webmining.Rmd-->

# Text Mining {#tm}

## Build regex 

### I want to...

Automatically build a regex with or `|`

### Here's how to: 

```{r}
regex_build <- function(...){
    reduce(list(...), ~ paste(.x, .y, sep = "|"))
}
regex_build("one","two","three", "four")
```

### Ok, but why?

`reduce` turns a list into one value by recursively applying a binary function to the list. In other words, `reduce(list("one","two","three"), ~ paste(.x, .y, sep = "|"))` does `paste("one", paste("two", paste("three", "four", sep = "|"), sep = "|"), sep = "|")`. 

### See also

---

## Regex extraction 

### I want to... 

Extract the elements from a list of words that match a regex

### Here's how to: 

```{r}
# Random words from https://www.randomlists.com/random-words
words <- c("copper", "explain", "ill-fated", "truck", "neat","unite","branch","educated","tenuous", "hum","decisive","notice")
# Extract words that end with a "e"
my_regex <- "e$"
keep(words, ~ grepl(my_regex, .x))
```

### Ok, but why? 

`keep` only keeps the element matching the predicate. Here, we're using `grepl`, that returns TRUE or FALSE if the expression is found in the string. 

### See also

---

## Collapse a list of words

Given the following list of hashtags: 

```{r}
hash <- list(tweet1 = c("#RStats", "#Datascience"), tweet2 = c("#RStats", "#BigData"))
```

### I want to... 

Turn my list of words into a simple vector.

### Here's how to: 

```{r}
simplify(hash) %>% paste(collapse = " ")
```

### Ok, but why? 

Simplify turns a list of n\*m elements into a vector of lenght n\*m. We then paste all the elements together, using the `collapse` argument from `paste`.

### See also



<!--chapter:end:text-wrangling.Rmd-->

# Code Optimisation {#optim}

## Compose functions

### I want to... 

Write a function that wraps other functions. 

### Here's how to:   

```{r}
library(broom)
tidy_lm <- compose(tidy, lm)
tidy_lm(Sepal.Length ~ Species, data = iris) 
```

### Ok, but why? 

`compose(y, x)` composes a function that will do `y(x())`. 

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 5: code optimization](http://colinfay.me/purrr-code-optim/)

---

## Prefilled functions

### I want to... 

Prefill a function so that I won't have to specify the arguments any time I use it. 

### Here's how to:   

```{r}
mean_na_rm <- partial(mean, na.rm = TRUE)
mean_na_rm(airquality$Ozone)
```

### Ok, but why? 

`partial(f, args = "x")` returns a function with a prefilled function with `args = "x"`.

### See also 

+ [A Crazy Little Thing Called {purrr} - Part 5: code optimization](http://colinfay.me/purrr-code-optim/)


---

## Negate a function

### I want to... 

Inverse what a function does. 

### Here's how to: 

```{r}
is_not_numeric <- negate(is.numeric)
is_not_numeric("this")
```

### Ok, but why? 

`negate(f)` returns a function that does `!f(...)`. 

### See also

---

## Negate a function

### I want to... 

Change what input my function can take. 

### Here's how to: 

```{r}
lifted_is_na <- lift_ld(is.na)
lifted_is_na(1,2,3,NA)
```

### Ok, but why? 

The `lift_*` family of functions change the type of input of other function. 

### See also


<!--chapter:end:code-optim.Rmd-->

# Data Wrangling {#wrangling}

## Read csvs

### I want to... 

Read a list of csv and turn them all into a data frame. 

### Here's how to:   

```{r message = FALSE}
files <- list.files(pattern = "csv", full.names = TRUE) %>% 
  set_names(basename(.))
full <- map_df(files, readr::read_csv, .id = "file")
```

### Ok, but why? 

`map_df` maps the read_csv on all the files, and returns a data.frame. The `.id` is used to keep track of the original file. 

### See also 


---

## Remove the NA

### I want to... 

Remove the NA from my list. 

### Here's how to:   

```{r}
l <- list(1, NA, "a", "b", NA)
discard(l, is.na)
```

### Ok, but why? 

`discard` is the opposite of `keep`, and removes all the elements that validate a condition. 

### See also 



---

## List append

### I want to... 

Add an element at the end of all my sublists. 

### Here's how to: 

```{r}
l <- list(list(1:10, 1:20), list(20:30, 40:50))
modify_depth(l, 2, ~ prepend(.x, sum(.x)))
```

### Ok, but why? 

`modify_depth` allows to map function in sublists at a given depth. 

`prepend` adds a element to the list at a givent index. If no index is given, the element is put at the beggining of the list. 

### See also

---

## Position matching

### I want to... 

Find the first argument that matches a condition. 

### Here's how to: 

```{r}
l <- 22:143
detect_index(l, ~ sqrt(.x) == 9)
```

### Ok, but why? 

`detect_index` returns the position of the first argument matching the condition. `detect` alone returns the value. 

You can pass the `.right` argument to these function, so that the search starts from the end of the list. 

### See also

---

## Cut a list 

### I want to... 

Takes all the arguments from a list until the condition is met. 

### Here's how to: 

```{r}
l <- 22:143
head_while(l, ~ sqrt(.x) < 9)
```

### Ok, but why? 

`head_while`, and its counterpart `tail_while`, take a list and perform a `head` or `tail` until a predicate is validated. 

### See also



<!--chapter:end:data-wrangling.Rmd-->

